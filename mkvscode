#!/bin/bash

# Define the gi function
gi () {
	curl -fLw '\n' https://www.toptal.com/developers/gitignore/api/"${(j:,:)@}"
}

# Create project folder function
create_project_folder() {
    # Check if the project folder already exists
    if [ -d "$PROJECT_NAME" ]; then
        echo "Project folder $PROJECT_NAME already exists."
        return 1
    fi

    # Create project directory
    mkdir -p "$PROJECT_NAME"
    cd "$PROJECT_NAME"

    # Initialize Git repository
    git init
}

# Option to open in VS Code flag
OPEN_IN_VSCODE=false

# Check for optional flags
while getopts ":o" opt; do
  case $opt in
    o)
      OPEN_IN_VSCODE=true
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      ;;
  esac
done

# Shift off the options and optional --
shift $((OPTIND-1))

# Check if the required number of arguments are passed
if [ "$#" -ne 2 ]; then
	echo "Usage: $0 [-o] project_name language(python|lua|go)"
	exit 1
fi

PROJECT_NAME=$1
LANGUAGE=$2

# Setup project based on the specified language
case $LANGUAGE in
    python)
        create_project_folder
        curl -fLw '\n' "https://www.toptal.com/developers/gitignore/api/python" > .gitignore
        ;;
    lua)
        create_project_folder
        curl -fLw '\n' "https://www.toptal.com/developers/gitignore/api/lua" > .gitignore
        ;;
    go)
        create_project_folder
        curl -fLw '\n' "https://www.toptal.com/developers/gitignore/api/go" > .gitignore
        ;;
    *)
        echo "Unsupported language: $LANGUAGE"
        exit 1
        ;;
esac

# Create README.md with placeholders
cat >README.md <<EOF
# $PROJECT_NAME

## About

Placeholder for project about section

## Installation

Placeholder for installation instructions

## Usage

Placeholder for usage instructions

## Notes

Placeholder for additional notes
EOF

# Create VS Code workspace file
cat >"$PROJECT_NAME.code-workspace" <<EOF
{
    "folders": [
        {
            "path": "."
        }
    ],
    "settings": {}
}
EOF

# Setup project based on the specified language
case $LANGUAGE in
python)
	# Create a Python file named after the project
	cat >"$PROJECT_NAME.py" <<EOF
def main():
  print("Hello, $PROJECT_NAME!")

if __name__ == "__main__":
  main()
EOF

	# Create launch.json for Python debugging
	mkdir -p .vscode
	cat >.vscode/launch.json <<EOF
{
    "configurations": [
        {
            "name": "Python: Current File",
            "type": "python",
            "request": "launch",
            "program": "\${workspaceFolder}/$PROJECT_NAME.py"
        }
    ]
}
EOF
	;;
lua)
	# Create a Lua file named after the project
	cat >"$PROJECT_NAME.lua" <<EOF
print("Hello, $PROJECT_NAME!")
EOF

	# Create launch.json for Lua debugging
	mkdir -p .vscode
	cat >.vscode/launch.json <<EOF
{
    "configurations": [
        {
            "type": "lua-local",
            "request": "launch",
            "name": "Debug",
            "program": {
                "lua": "lua5.4",
                "file": "\${workspaceFolder}/$PROJECT_NAME.lua"
            }
        }
    ]
}
EOF
	;;
go)
	# Create a Go file named after the project
	cat >main.go <<EOF
package main

import "fmt"

func main() {
    fmt.Println("Hello, $PROJECT_NAME!")
}
EOF

	# Create launch.json for Go debugging
	mkdir -p .vscode
	cat >.vscode/launch.json <<EOF
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch Program",
            "type": "go",
            "request": "launch",
            "mode": "auto",
            "program": "\${workspaceFolder}/main.go",
            "cwd": "\${workspaceFolder}"
        }
    ]
}
EOF

    # Create tasks.json for Go build and run
    cat >.vscode/tasks.json <<EOF
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "build",
            "type": "shell",
            "command": "go build -o $PROJECT_NAME main.go",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "problemMatcher": ["$go"]
        },
        {
            "label": "run",
            "type": "shell",
            "command": "./$PROJECT_NAME",
            "group": "test",
            "problemMatcher": [],
            "dependsOn": "build"
        }
    ]
}
EOF
	;;
esac

git add *
git add .vscode/*
git add .gitignore
git commit -m "Initial commit"

# At the end of your script, add the condition to open VS Code
if $OPEN_IN_VSCODE; then
    echo "Opening $PROJECT_NAME in VS Code..."
    code "$PROJECT_NAME.code-workspace"
fi

echo "$PROJECT_NAME project setup complete."
